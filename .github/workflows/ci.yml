name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '.github/assets/**'
      - 'LICENSE'
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
    actions: write

jobs:
  ci:
    env:
      CARGO_TERM_COLOR: always
    
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v33
      
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        id: nix-cache
        with:
          primary-key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ runner.arch }}-
          gc-max-store-size-linux: 5368709000 
          purge: true
          purge-prefixes: nix-${{ runner.os }}-${{ runner.arch }}-
          purge-created: 0
          purge-primary-key: never

      - name: Restore and cache build data
        uses: actions/cache@v4
        with:
          path: ./target/
          key: rust-build-${{ runner.os }}-${ runner.arch }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'rust-toolchain') }} 
    
      - name: Lint rust
        run: nix develop -c bash -c 'mkdir www/build && cargo clippy && cargo deny check --hide-inclusion-graph && cargo fmt --check'

      - name: Lint web
        run: nix develop -c bash -c 'cd www && bun install --locked && bun run check'

      - name: Run tests
        run: nix develop -c cargo test

  build:
    needs: ['ci']
    strategy:
      fail-fast: false
      matrix:
        features: ['', 'blog']
        runner: [ubuntu-22.04, ubuntu-22.04-arm]
    env:
      CARGO_FEATURES: ${{ matrix.features }}
      CARGO_TERM_COLOR: always

    name: Build - ${{ matrix.runner }} ${{ matrix.features != '' && format('({0})', matrix.features) || '' }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v33
      
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ runner.arch }}-
          gc-max-store-size-linux: 5368709000 
          purge: true
          purge-prefixes: nix-${{ runner.os }}-${{ runner.arch }}-
          purge-created: 0
          purge-primary-key: never

      - name: Restore and cache build data
        uses: actions/cache@v4
        with:
          path: ./target/
          key: rust-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'rust-toolchain') }} 

      - name: Build web
        run: nix develop -c bash -c 'cd www && bun install --locked && bun run build'

      - name: Compile rust
        run: nix develop -c cargo build --locked --release --no-default-features ${CARGO_FEATURES:+--features "$CARGO_FEATURES"}

      - name: Build docker image
        run: nix develop -c docker build -t ssh-portfolio --build-arg CARGO_FEATURES=$CARGO_FEATURES .

